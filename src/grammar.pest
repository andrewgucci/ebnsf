// TODO: only really supports BNF syntax, need to add support for EBNF things like repitition specifiers

syntax = _{ SOI ~ rules ~ EOI }

rules = { rule+ }

rule = { nonterminal ~ "::=" ~ sequence_list ~ NEWLINE*}

sequence_list = { sequence ~ ( "\n"* ~ "|" ~ "\n"* ~ sequence )* }

sequence = { (term | group)+ }

group = { "(" ~ NEWLINE* ~ (sequence_list) ~ NEWLINE* ~ ")" ~ opt_modifier}

nonterminal = @{ lbrack ~ rule_name ~ rbrack }

term = { (literal | nonterminal) ~ opt_modifier}

literal = @{
    "\"" ~ not_quote_or_nl+ ~ "\"" | 
    "'" ~ not_squote_or_nl+ ~ "'"
}

rule_name = { ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT | "_" | " " | "-")* }

WHITESPACE = _{ " " | "\t" }

not_quote_or_nl = {
    !(                // if the following text is not
        "\""          //     a quote
        | "\n"        //     or a newline
    )
    ~ ( "\\" ~ "\"" | ANY ) // then consume one character
}
not_squote_or_nl = {
    !(                // if the following text is not
        "\'"          //     a quote
        | "\n"        //     or a newline
    )
    ~ ( "\\" ~ "\'" | ANY ) // then consume one character
}

lbrack = _{ "<" }
rbrack = _{ ">" }
lparen = _{ "(" }
rparen = _{ ")" }

opt_modifier = { (oper_cond | oper_plus | oper_star)? }
oper_cond    = { "?" }
oper_plus    = { "+" }
oper_star    = { "*" }
